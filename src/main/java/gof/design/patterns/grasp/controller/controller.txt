Controller
The controller pattern assigns the responsibility of dealing with system events to a non-UI class that represents
the overall system or a use case scenario. A controller object is a non-user interface object responsible for receiving
or handling a system event.

Problem: Who should be responsible for handling an input system event?
Solution: A use case controller should be used to deal with all system events of a use case, and may be used for more
than one use case. For instance, for the use cases Create User and Delete User, one can have a single class called
UserController, instead of two separate use case controllers. Alternatively a facade controller would be used;
this applies when the object with responsibility for handling the event represents the overall system or a root object.

The controller is defined as the first object beyond the UI layer that receives and coordinates ("controls")
a system operation. The controller should delegate the work that needs to be done to other objects; it coordinates or
controls the activity. It should not do much work itself. The GRASP Controller can be thought of as being a part of the
application/service layer[4] (assuming that the application has made an explicit distinction between the
application/service layer and the domain layer) in an object-oriented system with common layers in an information
system logical architecture.

Related Pattern or Principle: Command, Facade, Layers, Pure Fabrication